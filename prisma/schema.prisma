// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  banned        Boolean        @default(false)
  role          String         @default("user")
  posts         Post[]         @relation("posts")
  subscribers   Follow[]       @relation("subcribe")
  subscribes    Follow[]       @relation("follower")
  favourites    Post[]         @relation("favourites")
  comments      Comment[]
  answers       Answer[]
  reports       Report[]
  notifications Notification[]

  messages      Message[]
  conversations Conversation[] @relation("conversation")
  seenMessages  Message[]      @relation("Seen")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  id String @id @default(uuid())

  subscriberId String
  subscribedId String

  subscriber User @relation(fields: [subscriberId], references: [id], name: "follower")
  subscribed User @relation(fields: [subscribedId], references: [id], name: "subcribe")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  text      String
  image     String
  author    User      @relation(fields: [userId], references: [id], name: "posts")
  userId    String
  views     Int
  tags      Tag[]
  comments  Comment[]
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  added     User[]    @relation(name: "favourites")
  reports   Report[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  posts     Post[]
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model Report {
  id        String   @id @default(uuid())
  authorId  String
  postId    String
  postTitle String
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model Notification {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  title          String
  text           String
  link           String?
  userId         String
  user           User          @relation(references: [id], fields: [userId])
  type           String        @default("follow")
  seen           Boolean       @default(false)
  expires        DateTime?     @default(now())
  conversationId String?
  convertation   Conversation? @relation(references: [id], fields: [conversationId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  userid    String
  postid    String
  post      Post     @relation(fields: [postid], references: [id])
  author    User     @relation(fields: [userid], references: [id])
  text      String
  to        String
  likes     Int
  dislikes  Int
  answers   Answer[]
}

model Answer {
  id        String   @id @default(uuid())
  commentid String
  comment   Comment  @relation(fields: [commentid], references: [id])
  author    User     @relation(fields: [userid], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  userid    String
  text      String
  to        String
  likes     String[]
  dislikes  String[]
}

model Conversation {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messages      Message[]
  users         User[]         @relation("conversation")
  notifications Notification[]
}

model Message {
  id        String   @id @default(uuid())
  body      String?
  image     String?
  file      String?
  createdAt DateTime @default(now())

  seenIds String[]
  seen    User[]   @relation("Seen")

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
